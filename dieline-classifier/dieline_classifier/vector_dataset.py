import pandas as pd
from tensorflow.keras import utils

CSV_FILENAME = "data/features.csv"
HDF_FILENAME = "data/features-vectors.h5"

class VectorDataset:
    """
    Class that holds the vector based dieline dataset.
    """

    def __init__(self, reprocess_data) -> None:
        """
        Loads the vector dieline dataset. If reprocess_data is true, the data
        is loaded from the CSV file and cached in an HDF file; otherwise, it
        is loaded from the HDF file.
        """

        if reprocess_data: 
            # Read from CSV and generate HDF.
            self._from_csv(CSV_FILENAME, 0.8, HDF_FILENAME)
        else:
            # Read from HDF.
            self._from_hdf(HDF_FILENAME)

    def _from_csv(self, csv_filename: str, train_fraction: float,
        hdf_filename: str) -> None:
        """
        Pre-process vector data. Only needs to be called once.
        """

        # Read the raw data.
        df = pd.read_csv(csv_filename)

        # Randomize the rows of the data frame, in place.
        df = df.sample(frac=1).reset_index(drop=True)

        # Split randomized data into inputs and labels.
        categories = sorted(set(df["Category"]))
        df["Label"] = [categories.index(category) for category in df["Category"]]
        x = df.iloc[:, 4:-1]
        y = df["Label"]

        # Split data into train and test sets, and save to hdf file.
        num_rows = df.shape[0]

        train_len = int(train_fraction * num_rows)

        self.train_x = x[0 : train_len]
        self.train_y = y[0 : train_len]
        self.test_x = x[train_len : ]
        self.test_y = y[train_len : ]
        
        self.train_x.to_hdf(hdf_filename, key="train_x", mode="w")
        self.train_y.to_hdf(hdf_filename, key="train_y")
        self.test_x.to_hdf(hdf_filename, key="test_x")
        self.test_y.to_hdf(hdf_filename, key="test_y")

        self.categories = pd.Series(categories) 
        self.categories.to_hdf(hdf_filename, key="categories")
        self._create_one_hot()

    def _from_hdf(self, hdf_filename: str) -> None:
        """
        Reads the data generated by _from_csv.
        """

        self.train_x = pd.read_hdf(hdf_filename, "train_x")
        self.train_y = pd.read_hdf(hdf_filename, "train_y")
        self.test_x = pd.read_hdf(hdf_filename, "test_x")
        self.test_y = pd.read_hdf(hdf_filename, "test_y")
        self.categories = pd.read_hdf(hdf_filename, "categories")
        self._create_one_hot()

    def _create_one_hot(self) -> None:
        """
        Adds one-hot vector labels to this instance.
        """

        output_dim = len(self.categories)
        self.train_y_one_hot = utils.to_categorical(self.train_y, num_classes=output_dim)
        self.test_y_one_hot = utils.to_categorical(self.test_y, num_classes=output_dim)
